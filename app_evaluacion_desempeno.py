import streamlit as st
import pandas as pd
import gspread
import plotly.express as px
from google.oauth2.service_account import Credentials
from datetime import datetime
import json
import time
from threading import Lock

# ===========================================================
# CONFIGURACI√ìN GENERAL
# ===========================================================
st.set_page_config(layout="wide", page_title="Sistema de Evaluaci√≥n del Desempe√±o")
# Ocultar √≠conos y enlaces de Streamlit/GitHub
st.markdown("""
    <style>
    /* Oculta el √≠cono de GitHub arriba a la derecha */
    #MainMenu {visibility: hidden;}
    header {visibility: hidden;}
    footer {visibility: hidden;}
    [data-testid="stToolbar"] {visibility: hidden !important;}
    </style>
""", unsafe_allow_html=True)

SCOPES = ["https://www.googleapis.com/auth/spreadsheets",
          "https://www.googleapis.com/auth/drive"]

# Credenciales desde Streamlit Secrets
creds_dict = json.loads(st.secrets["general"]["gcp_service_account"])
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
client = gspread.authorize(creds)

# ID del archivo de Google Sheets
SHEET_ID = "1L1hNefm59HtAnKwNci67B8nsiVdu7n63E9SZZlfoayo"

# ===========================================================
# CARGA DE DATOS CON CACH√â
# ===========================================================
@st.cache_data(ttl=60)
def cargar_datos():
    """Carga todos los datos de la hoja, forzando rango completo A:AP."""
    spreadsheet = client.open_by_key(SHEET_ID)
    hoja = spreadsheet.worksheet("trabajadores")

    # Forzar lectura completa (ajusta "AP" si agregas m√°s columnas en el futuro)
    rango = "A:AP"
    datos = hoja.get(rango)
    encabezados = datos[0]
    filas = datos[1:]

    # Rellenar filas cortas con celdas vac√≠as
    for fila in filas:
        if len(fila) < len(encabezados):
            fila += [""] * (len(encabezados) - len(fila))

    df = pd.DataFrame(filas, columns=encabezados)
    return df



trabajadores = cargar_datos()

if trabajadores.empty:
    st.error("‚ö†Ô∏è La hoja 'trabajadores' est√° vac√≠a o sin encabezados.")
    st.stop()

# ===========================================================
# INTERFAZ PRINCIPAL
# ===========================================================
st.title("üíº Sistema de Evaluaci√≥n del Desempe√±o")
modo = st.sidebar.radio("Selecciona el modo:", ("RH", "Administrador"))


# ===========================================================
# üî¥ CONTROL DE COLA Y BLOQUEO (PARA BATCH APPEND)
# ===========================================================
buffer_evaluaciones = []       # Cola temporal de evaluaciones
lock = Lock()                  # Control de exclusi√≥n mutua
ULTIMA_ESCRITURA = 0           # Timestamp √∫ltima escritura
INTERVALO_SEG = 60             # Intervalo m√°ximo (segundos)
BATCH_SIZE = 10                # Enviar cada 10 evaluaciones

# üî¥ Funci√≥n para enviar lote completo a Google Sheets
def enviar_lote_a_sheets():
    global buffer_evaluaciones, ULTIMA_ESCRITURA
    if not buffer_evaluaciones:
        return
    try:
        hoja_live = client.open_by_key(SHEET_ID).worksheet("trabajadores")
        hoja_live.spreadsheet.values_append(
            "trabajadores",
            params={"valueInputOption": "USER_ENTERED"},
            body={"values": buffer_evaluaciones},
        )
        buffer_evaluaciones.clear()
        ULTIMA_ESCRITURA = time.time()
        st.toast("üì§ Evaluaciones enviadas correctamente al servidor.")
    except Exception as e:
        st.error(f"‚ö†Ô∏è Error al enviar lote: {e}")

# ===========================================================
# MODO ADMINISTRADOR
# ===========================================================
if modo == "Administrador":
    password = st.text_input("Contrase√±a de administrador:", type="password")
    if password == "admin123":
        st.subheader("üìä Panel Administrativo")
        st.info("Visualiza y analiza el historial de evaluaciones.")

        # Filtros por √°rea y trabajador
        area_sel = st.selectbox(
            "Filtrar por √°rea:",
            ["Todos"] + sorted(trabajadores["√Årea de Adscripci√≥n:"].unique().tolist())
        )
        df_filtro = (
            trabajadores
            if area_sel == "Todos"
            else trabajadores[trabajadores["√Årea de Adscripci√≥n:"] == area_sel]
        )

        trabajador_sel = st.selectbox(
            "Filtrar por trabajador:",
            ["Todos"] + sorted(df_filtro["Nombre(s) y Apellidos:"].unique().tolist())
        )
        if trabajador_sel != "Todos":
            df_filtro = df_filtro[df_filtro["Nombre(s) y Apellidos:"] == trabajador_sel]

        st.dataframe(df_filtro, use_container_width=True)

        # -------------------------------------------------------
        # Filtrar solo filas con evaluaci√≥n real (no base maestra)
        # -------------------------------------------------------
        if "Puntaje total" in df_filtro.columns:
            df_filtro_eval = df_filtro[
                df_filtro["Puntaje total"].astype(str).str.strip() != ""
            ]
            df_filtro_eval = df_filtro_eval[
                df_filtro_eval["D√≠a"].astype(str).str.strip() != ""
            ]

            if not df_filtro_eval.empty:
                # Convierte los valores a num√©ricos
                df_filtro_eval["Puntaje total"] = pd.to_numeric(
                    df_filtro_eval["Puntaje total"], errors="coerce"
                )

                if df_filtro_eval["Puntaje total"].notnull().any():
                    promedio_general = round(df_filtro_eval["Puntaje total"].mean(), 2)
                    total_evals = len(df_filtro_eval)
                    st.markdown(
                        f"### üìà Promedio general: **{promedio_general}/24** &nbsp;&nbsp; _(Evaluaciones registradas: {total_evals})_"
                    )
                else:
                    st.info(
                        "No hay datos num√©ricos v√°lidos en 'Puntaje total' para calcular el promedio."
                    )

                # -------------------------------------------------------
                # GR√ÅFICAS
                # -------------------------------------------------------
                col1, col2 = st.columns(2)

                # üîπ Gr√°fica izquierda: evoluci√≥n temporal (por evaluaci√≥n)
                with col1:
                    if "Periodo" in df_filtro_eval.columns and "Puntaje total" in df_filtro_eval.columns:
                        fig1 = px.bar(
                            df_filtro_eval,
                            x="Periodo",
                            y="Puntaje total",
                            color="Nombre(s) y Apellidos:",
                            barmode="group",
                            title="Evoluci√≥n del Puntaje por Evaluaci√≥n (Mes/A√±o)",
                            text="Puntaje total"
                        )
                        fig1.update_layout(
                            xaxis_title="Periodo (Mes/A√±o)",
                            yaxis_title="Puntaje total",
                            legend_title="Trabajador",
                            bargap=0.25
                        )
                        fig1.update_traces(texttemplate='%{text:.1f}', textposition='outside')
                        st.plotly_chart(fig1, use_container_width=True)
                    else:
                        st.warning("‚ö†Ô∏è No se encontraron columnas 'Mes', 'A√±o' o 'Puntaje total' para generar la gr√°fica temporal.")

                # üîπ Gr√°fica derecha: distribuci√≥n por √°rea
                with col2:
                    fig2 = px.box(
                        df_filtro_eval,
                        x="√Årea de Adscripci√≥n:",
                        y="Puntaje total",
                        title="Distribuci√≥n del Puntaje por √Årea"
                    )
                    st.plotly_chart(fig2, use_container_width=True)

            else:
                st.warning("‚ö†Ô∏è No hay evaluaciones registradas en esta √°rea o trabajador.")
    elif password != "":
        st.error("‚ùå Contrase√±a incorrecta.")


# ===========================================================
# MODO RH
# ===========================================================
elif modo == "RH":
    st.subheader("üßæ Modo Recursos Humanos: Evaluaci√≥n del Desempe√±o")

    # Trabajadores √∫nicos
    trabajadores_unicos = trabajadores.drop_duplicates(subset=["Nombre(s) y Apellidos:"])

    # Filtros
    area_sel = st.selectbox("Filtrar por √°rea:", sorted(trabajadores_unicos["√Årea de Adscripci√≥n:"].unique().tolist()))
    lista_nombres = trabajadores_unicos[trabajadores_unicos["√Årea de Adscripci√≥n:"] == area_sel]["Nombre(s) y Apellidos:"].tolist()
    seleccionado = st.selectbox("Selecciona un trabajador:", lista_nombres)
    trab = trabajadores_unicos[trabajadores_unicos["Nombre(s) y Apellidos:"] == seleccionado].iloc[0]

    # -------------------------------------------------------
    # DATOS PERSONALES
    # -------------------------------------------------------
    st.subheader("Datos Personales")
    cols = st.columns(2)
    campos = [
        "Nombre(s) y Apellidos:", "C.U.R.P.", "R.F.C.", "Superior Jer√°rquico:", "√Årea de Adscripci√≥n:",
        "Puesto que desempe√±a:", "Nivel:", "Fecha del Nombramiento:", "Antig√ºedad en el Puesto:", "Antig√ºedad en Gobierno:"
    ]
    etiquetas = [
        "Nombre", "CURP", "RFC", "Superior", "√Årea", "Puesto", "Nivel",
        "Fecha de Nombramiento", "Antig√ºedad en Puesto", "Antig√ºedad en Gobierno"
    ]
    for i, campo in enumerate(campos):
        cols[i % 2].text_input(etiquetas[i], trab[campo], disabled=True)

    # -------------------------------------------------------
    # FUNCIONES Y METAS
    # -------------------------------------------------------
    st.subheader("Actividades Principales")
    for i in range(1, 4):
        st.text_input(f"Actividad {i}", trab[f"Principal Funcion {i}"], disabled=True)

    st.subheader("Metas Reales Cumplidas")
    meta_real, resultados = {}, {}
    for i in range(1, 4):
        desc = trab[f"Meta {i} descripci√≥n"] or "Sin descripci√≥n"
        prog = float(trab[f"Meta {i} prog"] or 0)
        st.markdown(f"**Meta {i}:** {desc} (Programada: {prog})")
        meta_real[f"meta{i}_real"] = st.number_input(f"Cumplimiento real de Meta {i}", min_value=0.0, value=0.0, step=0.1, key=f"meta{i}_real")
        resultados[f"resultado{i}"] = round(meta_real[f"meta{i}_real"] / prog * 100, 2) if prog else 0
        st.write(f"Resultado: {resultados[f'resultado{i}']}%")

    # -------------------------------------------------------
    # FACTORES DE CALIDAD CON TOOLTIP
    # -------------------------------------------------------
    st.subheader("Factores de Calidad")

    descripciones = {
        "CONOCIMIENTO DEL PUESTO": [
            "1Ô∏è‚É£ Posee m√≠nimos conocimientos del puesto que tiene asignado, lo que le impide cumplir con la oportunidad y calidad establecidas.",
            "2Ô∏è‚É£ Posee conocimientos elementales del puesto, lo que provoca deficiencias en la oportunidad y calidad b√°sicas establecidas.",
            "3Ô∏è‚É£ Posee un regular conocimiento del puesto, lo que le permite prestar servicios con oportunidad y calidad b√°sicas.",
            "4Ô∏è‚É£ Posee amplios conocimientos del puesto que tiene asignado, lo que le permite prestar los servicios con oportunidad y calidad requeridas."
        ],
        "CRITERIO": [
            "1Ô∏è‚É£ Propone soluciones irrelevantes a los problemas de trabajo que se le presentan.",
            "2Ô∏è‚É£ Propone soluciones aceptables a los problemas de trabajo que se le presentan.",
            "3Ô∏è‚É£ Propone soluciones adecuadas a los problemas de trabajo que se le presentan.",
            "4Ô∏è‚É£ Propone soluciones √≥ptimas a los problemas de trabajo que se le presentan."
        ],
        "CALIDAD DEL TRABAJO": [
            "1Ô∏è‚É£ Realiza trabajos con alto √≠ndice de errores en su confiabilidad, exactitud y presentaci√≥n.",
            "2Ô∏è‚É£ Realiza trabajos regulares con algunos errores.",
            "3Ô∏è‚É£ Realiza buenos trabajos y excepcionalmente comete errores.",
            "4Ô∏è‚É£ Realiza trabajos excelentes sin errores en su confiabilidad, exactitud y presentaci√≥n."
        ],
        "T√âCNICA Y ORGANIZACI√ìN DEL TRABAJO": [
            "1Ô∏è‚É£ Aplica en grado m√≠nimo las t√©cnicas y organizaci√≥n establecidas.",
            "2Ô∏è‚É£ Aplica ocasionalmente las t√©cnicas establecidas.",
            "3Ô∏è‚É£ Aplica la mayor√≠a de las veces las t√©cnicas establecidas.",
            "4Ô∏è‚É£ Aplica en grado √≥ptimo las t√©cnicas y organizaci√≥n establecidas."
        ],
        "NECESIDAD DE SUPERVISI√ìN": [
            "1Ô∏è‚É£ Requiere permanente supervisi√≥n para realizar las funciones asignadas.",
            "2Ô∏è‚É£ Requiere ocasional supervisi√≥n para realizar las funciones asignadas.",
            "3Ô∏è‚É£ Requiere m√≠nima supervisi√≥n para realizar las funciones asignadas.",
            "4Ô∏è‚É£ Requiere nula supervisi√≥n para realizar las funciones asignadas."
        ],
        "CAPACITACI√ìN RECIBIDA": [
            "1Ô∏è‚É£ Aplica m√≠nimamente los conocimientos adquiridos mediante la capacitaci√≥n.",
            "2Ô∏è‚É£ Aplica limitadamente los conocimientos adquiridos.",
            "3Ô∏è‚É£ Aplica suficientemente los conocimientos adquiridos, elevando la eficiencia.",
            "4Ô∏è‚É£ Aplica ampliamente los conocimientos adquiridos, elevando la eficiencia al m√°ximo."
        ],
        "INICIATIVA": [
            "1Ô∏è‚É£ Realiza nulas aportaciones para el mejoramiento del trabajo.",
            "2Ô∏è‚É£ Realiza aportaciones irrelevantes para el mejoramiento.",
            "3Ô∏è‚É£ Realiza aportaciones destacadas que mejoran calidad y tiempos.",
            "4Ô∏è‚É£ Realiza aportaciones √≥ptimas y continuas para el mejoramiento."
        ],
        "COLABORACI√ìN Y DISCRECI√ìN": [
            "1Ô∏è‚É£ Muestra nula disposici√≥n para colaborar y provoca conflictos.",
            "2Ô∏è‚É£ Muestra regular disposici√≥n y comete indiscreciones involuntarias.",
            "3Ô∏è‚É£ Muestra buena disposici√≥n y prudencia en el manejo de informaci√≥n.",
            "4Ô∏è‚É£ Muestra notable disposici√≥n y utiliza positivamente la informaci√≥n."
        ],
        "RESPONSABILIDAD Y DISCIPLINA": [
            "1Ô∏è‚É£ Cumple m√≠nimamente con las metas y evade disposiciones.",
            "2Ô∏è‚É£ Cumple ocasionalmente con las metas y objeta disposiciones.",
            "3Ô∏è‚É£ Cumple la mayor√≠a de las veces con las metas y disposiciones.",
            "4Ô∏è‚É£ Cumple invariablemente con metas institucionales y disposiciones."
        ],
        "TRABAJO EN EQUIPO": [
            "1Ô∏è‚É£ Manifiesta nula disposici√≥n y entorpece el trabajo del equipo.",
            "2Ô∏è‚É£ Manifiesta regular disposici√≥n y ocasionalmente interfiere.",
            "3Ô∏è‚É£ Manifiesta buena disposici√≥n, contribuyendo al equipo.",
            "4Ô∏è‚É£ Manifiesta notable disposici√≥n, siendo un elemento clave del equipo."
        ],
        "RELACIONES INTERPERSONALES": [
            "1Ô∏è‚É£ Mantiene nulo grado de interacci√≥n con jefes, compa√±eros y p√∫blico.",
            "2Ô∏è‚É£ Mantiene regular grado de interacci√≥n con jefes, compa√±eros y p√∫blico.",
            "3Ô∏è‚É£ Mantiene buen grado de interacci√≥n con jefes, compa√±eros y p√∫blico.",
            "4Ô∏è‚É£ Mantiene excelente grado de interacci√≥n con jefes, compa√±eros y p√∫blico."
        ],
        "MEJORA CONTINUA": [
            "1Ô∏è‚É£ Demuestra m√≠nimo compromiso para identificar √°reas de oportunidad.",
            "2Ô∏è‚É£ Demuestra regular compromiso para proponer mejoras.",
            "3Ô∏è‚É£ Demuestra alto compromiso para identificar y proponer mejoras.",
            "4Ô∏è‚É£ Demuestra amplio compromiso para mejorar continuamente su desempe√±o."
        ]
    }


    st.markdown("""
        <style>
        .tooltip { position: relative; display: inline-block; cursor: help; color: #2c7be5; font-weight: bold; }
        .tooltip .tooltiptext {
            visibility: hidden; width: 420px; background-color: #f8f9fa; color: #000; text-align: left;
            border-radius: 8px; padding: 10px; position: absolute; z-index: 1;
            top: 125%; left: 50%; transform: translateX(-50%);
            box-shadow: 0px 0px 10px rgba(0,0,0,0.2); font-size: 13px; line-height: 1.4;
        }
        .tooltip:hover .tooltiptext { visibility: visible; }
        </style>
    """, unsafe_allow_html=True)

    calidad = {}
    for factor, niveles in descripciones.items():
        tooltip_html = f"<div class='tooltip'>‚ìò<div class='tooltiptext'><b>{factor}</b><br><br>{'<br>'.join(niveles)}</div></div>"
        st.markdown(f"### {factor} {tooltip_html}", unsafe_allow_html=True)
        calidad[factor] = st.slider("Selecciona nivel", 1, 4, 2, key=f"slider_{factor}")

        puntaje_total = sum(calidad.values())
    st.write(f"**Puntaje total:** {puntaje_total}/48")  # ‚úÖ 12 factores = 48 puntos posibles

    # -------------------------------------------------------
    # FECHA BLOQUEADA Y COMENTARIOS
    # -------------------------------------------------------
    st.subheader("Fecha y Comentarios")
    hoy = datetime.now()
    dia, mes, anio = hoy.day, hoy.month, hoy.year
    st.text_input("Fecha de Evaluaci√≥n", f"{dia}/{mes}/{anio}", disabled=True)
    comentarios = st.text_area("Comentarios", key="comentarios_eval")

# ===========================================================
# GUARDAR EVALUACI√ìN (versi√≥n con batch y sincronizaci√≥n)
# ===========================================================
if st.button("Guardar Evaluaci√≥n"):
    hoja_live = client.open_by_key(SHEET_ID).worksheet("trabajadores")

    columnas_fijas = [
        "Nombre(s) y Apellidos:", "C.U.R.P.", "R.F.C.", "Superior Jer√°rquico:", "√Årea de Adscripci√≥n:",
        "Puesto que desempe√±a:", "Nivel:", "Fecha del Nombramiento:", "Antig√ºedad en el Puesto:",
        "Antig√ºedad en Gobierno:", "Principal Funcion 1", "Principal Funcion 2", "Principal Funcion 3",
        "Meta 1 descripci√≥n", "Meta 2 descripci√≥n", "Meta 3 descripci√≥n", "Meta 1 prog", "Meta 2 prog", "Meta 3 prog"
    ]

    nueva_fila = [
        trab[c] for c in columnas_fijas
    ] + [
        dia, mes, anio,
        meta_real["meta1_real"], meta_real["meta2_real"], meta_real["meta3_real"],
        resultados["resultado1"], resultados["resultado2"], resultados["resultado3"],
        calidad["CONOCIMIENTO DEL PUESTO"], calidad["CRITERIO"], calidad["CALIDAD DEL TRABAJO"],
        calidad["T√âCNICA Y ORGANIZACI√ìN DEL TRABAJO"], calidad["NECESIDAD DE SUPERVISI√ìN"],
        calidad["CAPACITACI√ìN RECIBIDA"], calidad["INICIATIVA"], calidad["COLABORACI√ìN Y DISCRECI√ìN"],
        calidad["RESPONSABILIDAD Y DISCIPLINA"], calidad["TRABAJO EN EQUIPO"],
        calidad["RELACIONES INTERPERSONALES"], calidad["MEJORA CONTINUA"],
        puntaje_total, comentarios
    ]

    nueva_fila = [str(x) for x in nueva_fila]

    encabezados = hoja_live.row_values(1)
    num_columnas = len(encabezados)

    if len(nueva_fila) < num_columnas:
        nueva_fila += [""] * (num_columnas - len(nueva_fila))
    elif len(nueva_fila) > num_columnas:
        nueva_fila = nueva_fila[:num_columnas]

    # üî¥ NUEVO: se guarda en cola y se env√≠a en bloque
    with lock:
        buffer_evaluaciones.append(nueva_fila)
        if len(buffer_evaluaciones) >= BATCH_SIZE or (time.time() - ULTIMA_ESCRITURA > INTERVALO_SEG):
            enviar_lote_a_sheets()

    # üî¥ Confirmaci√≥n inmediata
    st.success(f"‚úÖ Evaluaci√≥n registrada localmente para {trab['Nombre(s) y Apellidos:']} el {dia}/{mes}/{anio}.")
    st.info("La informaci√≥n se enviar√° autom√°ticamente al servidor en los pr√≥ximos segundos o al acumular varias evaluaciones.")
















