import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import plotly.express as px
import json

# ---------------------------------------------------------
# CONFIGURACI√ìN GENERAL
# ---------------------------------------------------------
st.set_page_config(layout="wide", page_title="Evaluaci√≥n del Desempe√±o")

# Autenticaci√≥n con Google Sheets usando st.secrets
scopes = ["https://www.googleapis.com/auth/spreadsheets",
          "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(st.secrets["general"]["gcp_service_account"])
creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
client = gspread.authorize(creds)

# Abrir archivo y hoja de c√°lculo
spreadsheet = client.open("trabajadores")
hoja = spreadsheet.worksheet("trabajadores")

# ---------------------------------------------------------
# ENCABEZADOS BASE Y DE EVALUACI√ìN
# ---------------------------------------------------------
HEADERS_BASE = [
    "Nombre(s) y Apellidos:", "C.U.R.P.", "R.F.C.", "Superior Jer√°rquico:", "√Årea de Adscripci√≥n:",
    "Puesto que desempe√±a:", "Nivel:", "Fecha del Nombramiento:", "Antig√ºedad en el Puesto:",
    "Antig√ºedad en Gobierno:", "Principal Funcion 1", "Principal Funcion 2", "Principal Funcion 3",
    "Meta 1 descripci√≥n", "Meta 2 descripci√≥n", "Meta 3 descripci√≥n",
    "Meta 1 prog", "Meta 2 prog", "Meta 3 prog"
]

HEADERS_EVAL = [
    "D√≠a", "Mes", "A√±o",
    "Meta 1 real", "Meta 2 real", "Meta 3 real",
    "Resultado 1", "Resultado 2", "Resultado 3",
    "CONOCIMIENTO DEL PUESTO", "CRITERIO", "CALIDAD DEL TRABAJO",
    "T√âCNICA Y ORGANIZACI√ìN DEL TRABAJO", "NECESIDAD DE SUPERVISI√ìN",
    "CAPACITACI√ìN RECIBIDA", "INICIATIVA", "COLABORACI√ìN Y DISCRECI√ìN",
    "RESPONSABILIDAD Y DISCIPLINA", "TRABAJO EN EQUIPO",
    "RELACIONES INTERPERSONALES", "MEJORA CONTINUA",
    "Puntaje total", "Comentarios"
]

HEADERS_FULL = HEADERS_BASE + HEADERS_EVAL

# ---------------------------------------------------------
# CARGAR BASE DE DATOS DESDE GOOGLE SHEETS
# ---------------------------------------------------------
datos = hoja.get_all_records()
if not datos:
    st.error("‚ö†Ô∏è La hoja 'trabajadores' est√° vac√≠a o sin encabezados.")
    st.stop()

trabajadores = pd.DataFrame(datos)

# ---------------------------------------------------------
# INTERFAZ PRINCIPAL
# ---------------------------------------------------------
st.title("üíº Sistema de Evaluaci√≥n del Desempe√±o")
modo = st.sidebar.radio("Selecciona el modo:", ("RH", "Administrador"))

# =========================================================
# MODO ADMINISTRADOR
# =========================================================
if modo == "Administrador":
    password = st.text_input("Contrase√±a:", type="password")
    if password == "admin123":
        st.subheader("üîé B√∫squeda de Historial de Evaluaciones")

        # Filtro por √°rea
        areas = sorted(trabajadores["√Årea de Adscripci√≥n:"].dropna().unique())
        area_sel = st.selectbox("Filtrar por √°rea:", ["(Todas)"] + list(areas))

        df_filtro = trabajadores.copy()
        if area_sel != "(Todas)":
            df_filtro = df_filtro[df_filtro["√Årea de Adscripci√≥n:"] == area_sel]

        # Filtro por trabajador (sin duplicados)
        trabajadores_unicos = sorted(df_filtro["Nombre(s) y Apellidos:"].unique())
        trab_sel = st.selectbox("Selecciona un trabajador:", trabajadores_unicos)

        # Filtrar historial
        df_hist = trabajadores[trabajadores["Nombre(s) y Apellidos:"] == trab_sel]
        if df_hist.empty:
            st.warning("No hay evaluaciones registradas para este trabajador.")
            st.stop()

        st.dataframe(df_hist)

        # -------------------------------------------------
        # GR√ÅFICAS INTERACTIVAS
        # -------------------------------------------------
        st.subheader(f"üìä Gr√°ficas de Desempe√±o ‚Äî {trab_sel} ({df_hist.iloc[0]['√Årea de Adscripci√≥n:']})")

        # Convertir fecha a formato para ordenar
        df_hist["fecha_eval"] = pd.to_datetime(df_hist[["A√±o", "Mes", "D√≠a"]])

        # Gr√°fica de evoluci√≥n de puntaje total
        fig1 = px.line(df_hist, x="fecha_eval", y="Puntaje total",
                       markers=True, title="Evoluci√≥n del Puntaje Total",
                       color_discrete_sequence=["#1f77b4"])
        fig1.update_layout(template="plotly_white", title_x=0.5)

        # Gr√°fica de resultados por meta
        metas_cols = ["Resultado 1", "Resultado 2", "Resultado 3"]
        df_metas = df_hist.melt(id_vars="fecha_eval", value_vars=metas_cols,
                                var_name="Meta", value_name="Resultado (%)")
        fig2 = px.bar(df_metas, x="fecha_eval", y="Resultado (%)", color="Meta",
                      barmode="group", title="Resultados por Meta",
                      color_discrete_sequence=["#1f77b4", "#4b8bbe", "#a6c8ff"])
        fig2.update_layout(template="plotly_white", title_x=0.5)

        # Mostrar lado a lado
        col1, col2 = st.columns(2)
        with col1:
            st.plotly_chart(fig1, use_container_width=True)
        with col2:
            st.plotly_chart(fig2, use_container_width=True)

        # Promedio general de puntaje
        promedio_total = round(df_hist["Puntaje total"].astype(float).mean(), 2)
        st.metric(label="Promedio hist√≥rico del puntaje total", value=f"{promedio_total}/48")

    elif password:
        st.error("‚ùå Contrase√±a incorrecta")

# =========================================================
# MODO RH: EVALUACI√ìN
# =========================================================
elif modo == "RH":
    st.subheader("Modo Recursos Humanos: Evaluaci√≥n del Desempe√±o")

    # Filtro por √°rea
    areas = sorted(trabajadores["√Årea de Adscripci√≥n:"].dropna().unique())
    area_sel = st.selectbox("Filtrar por √°rea:", ["(Todas)"] + list(areas))
    df_filtro = trabajadores.copy()
    if area_sel != "(Todas)":
        df_filtro = df_filtro[df_filtro["√Årea de Adscripci√≥n:"] == area_sel]

    # Filtro por trabajador (sin duplicados)
    trabajadores_unicos = sorted(df_filtro["Nombre(s) y Apellidos:"].unique())
    seleccionado = st.selectbox("Selecciona un trabajador:", trabajadores_unicos)
    trab = df_filtro[df_filtro["Nombre(s) y Apellidos:"] == seleccionado].iloc[0]

    # -----------------------------------------------------
    # DATOS PERSONALES
    # -----------------------------------------------------
    st.subheader("Datos Personales")
    cols = st.columns(2)
    campos = [
        "Nombre(s) y Apellidos:", "C.U.R.P.", "R.F.C.", "Superior Jer√°rquico:",
        "√Årea de Adscripci√≥n:", "Puesto que desempe√±a:", "Nivel:",
        "Fecha del Nombramiento:", "Antig√ºedad en el Puesto:", "Antig√ºedad en Gobierno:"
    ]
    etiquetas = [
        "Nombre", "CURP", "RFC", "Superior", "√Årea", "Puesto", "Nivel",
        "Fecha de Nombramiento", "Antig√ºedad en Puesto", "Antig√ºedad en Gobierno"
    ]
    for i, campo in enumerate(campos):
        cols[i % 2].text_input(etiquetas[i], trab[campo], disabled=True)

    # -----------------------------------------------------
    # FUNCIONES PRINCIPALES
    # -----------------------------------------------------
    st.subheader("Actividades Principales")
    for i in range(1, 4):
        st.text_input(f"Actividad {i}", trab[f"Principal Funcion {i}"], disabled=True)

    # -----------------------------------------------------
    # METAS REALES
    # -----------------------------------------------------
    st.subheader("Metas Reales Cumplidas")
    meta_real, resultados = {}, {}
    for i in range(1, 4):
        desc = trab[f"Meta {i} descripci√≥n"] or "Sin descripci√≥n"
        prog = float(trab[f"Meta {i} prog"] or 0)
        st.markdown(f"**Meta {i}:** {desc} (Programada: {prog})")
        meta_real[f"meta{i}_real"] = st.number_input(f"Cumplimiento real de Meta {i}",
                                                     min_value=0.0, value=0.0, step=0.1, key=f"meta{i}_real")
        resultados[f"resultado{i}"] = round(meta_real[f"meta{i}_real"] / prog * 100, 2) if prog else 0
        st.write(f"Resultado: {resultados[f'resultado{i}']}%")

    # -----------------------------------------------------
    # FACTORES DE CALIDAD (TOOLTIPS)
    # -----------------------------------------------------
    st.subheader("Factores de Calidad")
    st.markdown("""
        <style>
        .tooltip { position: relative; display: inline-block; cursor: help; color: #2c7be5; font-weight: bold; }
        .tooltip .tooltiptext {
            visibility: hidden; width: 420px; background-color: #f8f9fa; color: #000; text-align: left;
            border-radius: 8px; padding: 10px; position: absolute; z-index: 1;
            top: 125%; left: 50%; transform: translateX(-50%);
            box-shadow: 0px 0px 10px rgba(0,0,0,0.2); font-size: 13px; line-height: 1.4;
        }
        .tooltip:hover .tooltiptext { visibility: visible; }
        </style>
    """, unsafe_allow_html=True)

    descripciones = {
        "CONOCIMIENTO DEL PUESTO": [
            "1Ô∏è‚É£ Posee m√≠nimos conocimientos del puesto que tiene asignado, lo que le impide cumplir con la oportunidad y calidad establecidas.",
            "2Ô∏è‚É£ Posee conocimientos elementales del puesto, lo que provoca deficiencias en la oportunidad y calidad b√°sicas establecidas.",
            "3Ô∏è‚É£ Posee un regular conocimiento del puesto, lo que le permite prestar servicios con oportunidad y calidad b√°sicas.",
            "4Ô∏è‚É£ Posee amplios conocimientos del puesto que tiene asignado, lo que le permite prestar los servicios con oportunidad y calidad requeridas."
        ],
        "CRITERIO": [
            "1Ô∏è‚É£ Propone soluciones irrelevantes a los problemas de trabajo que se le presentan.",
            "2Ô∏è‚É£ Propone soluciones aceptables a los problemas de trabajo que se le presentan.",
            "3Ô∏è‚É£ Propone soluciones adecuadas a los problemas de trabajo que se le presentan.",
            "4Ô∏è‚É£ Propone soluciones √≥ptimas a los problemas de trabajo que se le presentan."
        ],
        "CALIDAD DEL TRABAJO": [
            "1Ô∏è‚É£ Realiza trabajos con alto √≠ndice de errores en su confiabilidad, exactitud y presentaci√≥n.",
            "2Ô∏è‚É£ Realiza trabajos regulares con algunos errores.",
            "3Ô∏è‚É£ Realiza buenos trabajos y excepcionalmente comete errores.",
            "4Ô∏è‚É£ Realiza trabajos excelentes sin errores en su confiabilidad, exactitud y presentaci√≥n."
        ],
        "T√âCNICA Y ORGANIZACI√ìN DEL TRABAJO": [
            "1Ô∏è‚É£ Aplica en grado m√≠nimo las t√©cnicas y organizaci√≥n establecidas.",
            "2Ô∏è‚É£ Aplica ocasionalmente las t√©cnicas establecidas.",
            "3Ô∏è‚É£ Aplica la mayor√≠a de las veces las t√©cnicas establecidas.",
            "4Ô∏è‚É£ Aplica en grado √≥ptimo las t√©cnicas y organizaci√≥n establecidas."
        ],
        "NECESIDAD DE SUPERVISI√ìN": [
            "1Ô∏è‚É£ Requiere permanente supervisi√≥n para realizar las funciones asignadas.",
            "2Ô∏è‚É£ Requiere ocasional supervisi√≥n para realizar las funciones asignadas.",
            "3Ô∏è‚É£ Requiere m√≠nima supervisi√≥n para realizar las funciones asignadas.",
            "4Ô∏è‚É£ Requiere nula supervisi√≥n para realizar las funciones asignadas."
        ],
        "CAPACITACI√ìN RECIBIDA": [
            "1Ô∏è‚É£ Aplica m√≠nimamente los conocimientos adquiridos mediante la capacitaci√≥n.",
            "2Ô∏è‚É£ Aplica limitadamente los conocimientos adquiridos.",
            "3Ô∏è‚É£ Aplica suficientemente los conocimientos adquiridos, elevando la eficiencia.",
            "4Ô∏è‚É£ Aplica ampliamente los conocimientos adquiridos, elevando la eficiencia al m√°ximo."
        ],
        "INICIATIVA": [
            "1Ô∏è‚É£ Realiza nulas aportaciones para el mejoramiento del trabajo.",
            "2Ô∏è‚É£ Realiza aportaciones irrelevantes para el mejoramiento.",
            "3Ô∏è‚É£ Realiza aportaciones destacadas que mejoran calidad y tiempos.",
            "4Ô∏è‚É£ Realiza aportaciones √≥ptimas y continuas para el mejoramiento."
        ],
        "COLABORACI√ìN Y DISCRECI√ìN": [
            "1Ô∏è‚É£ Muestra nula disposici√≥n para colaborar y provoca conflictos.",
            "2Ô∏è‚É£ Muestra regular disposici√≥n y comete indiscreciones involuntarias.",
            "3Ô∏è‚É£ Muestra buena disposici√≥n y prudencia en el manejo de informaci√≥n.",
            "4Ô∏è‚É£ Muestra notable disposici√≥n y utiliza positivamente la informaci√≥n."
        ],
        "RESPONSABILIDAD Y DISCIPLINA": [
            "1Ô∏è‚É£ Cumple m√≠nimamente con las metas y evade disposiciones.",
            "2Ô∏è‚É£ Cumple ocasionalmente con las metas y objeta disposiciones.",
            "3Ô∏è‚É£ Cumple la mayor√≠a de las veces con las metas y disposiciones.",
            "4Ô∏è‚É£ Cumple invariablemente con metas institucionales y disposiciones."
        ],
        "TRABAJO EN EQUIPO": [
            "1Ô∏è‚É£ Manifiesta nula disposici√≥n y entorpece el trabajo del equipo.",
            "2Ô∏è‚É£ Manifiesta regular disposici√≥n y ocasionalmente interfiere.",
            "3Ô∏è‚É£ Manifiesta buena disposici√≥n, contribuyendo al equipo.",
            "4Ô∏è‚É£ Manifiesta notable disposici√≥n, siendo un elemento clave del equipo."
        ],
        "RELACIONES INTERPERSONALES": [
            "1Ô∏è‚É£ Mantiene nulo grado de interacci√≥n con jefes, compa√±eros y p√∫blico.",
            "2Ô∏è‚É£ Mantiene regular grado de interacci√≥n con jefes, compa√±eros y p√∫blico.",
            "3Ô∏è‚É£ Mantiene buen grado de interacci√≥n con jefes, compa√±eros y p√∫blico.",
            "4Ô∏è‚É£ Mantiene excelente grado de interacci√≥n con jefes, compa√±eros y p√∫blico."
        ],
        "MEJORA CONTINUA": [
            "1Ô∏è‚É£ Demuestra m√≠nimo compromiso para identificar √°reas de oportunidad.",
            "2Ô∏è‚É£ Demuestra regular compromiso para proponer mejoras.",
            "3Ô∏è‚É£ Demuestra alto compromiso para identificar y proponer mejoras.",
            "4Ô∏è‚É£ Demuestra amplio compromiso para mejorar continuamente su desempe√±o."
        ]
    }

    calidad = {}
    for factor, niveles in descripciones.items():
        tooltip_html = f"<div class='tooltip'>‚ìò<div class='tooltiptext'><b>{factor}</b><br><br>{'<br>'.join(niveles)}</div></div>"
        st.markdown(f"### {factor} {tooltip_html}", unsafe_allow_html=True)
        calidad[factor] = st.slider("Selecciona nivel", 1, 4, 2, key=f"slider_{factor}")

    puntaje_total = sum(calidad.values())
    st.write(f"**Puntaje total:** {puntaje_total}/48")

    # -----------------------------------------------------
    # FECHA AUTOM√ÅTICA Y COMENTARIOS
    # -----------------------------------------------------
    st.subheader("Fecha y Comentarios (autom√°tica)")
    hoy = datetime.now()
    st.write(f"üìÖ Fecha autom√°tica: {hoy.strftime('%d/%m/%Y')}")
    comentarios = st.text_area("Comentarios", key="comentarios_eval")

    # -----------------------------------------------------
    # GUARDAR EVALUACI√ìN
    # -----------------------------------------------------
    if st.button("Guardar Evaluaci√≥n"):
        base_map = {col: str(trab[col]) if col in trab.index else "" for col in HEADERS_BASE}
        eval_map = {
            "D√≠a": str(hoy.day), "Mes": str(hoy.month), "A√±o": str(hoy.year),
            "Meta 1 real": str(meta_real["meta1_real"]),
            "Meta 2 real": str(meta_real["meta2_real"]),
            "Meta 3 real": str(meta_real["meta3_real"]),
            "Resultado 1": str(resultados["resultado1"]),
            "Resultado 2": str(resultados["resultado2"]),
            "Resultado 3": str(resultados["resultado3"]),
            "Puntaje total": str(puntaje_total),
            "Comentarios": str(comentarios)
        }
        for f in calidad:
            eval_map[f] = str(calidad[f])

        row = [base_map.get(h, "") if h in HEADERS_BASE else eval_map.get(h, "") for h in HEADERS_FULL]
        hoja.append_row(row, value_input_option="USER_ENTERED")

        st.success(f"‚úÖ Evaluaci√≥n guardada correctamente para {trab['Nombre(s) y Apellidos:']} el {hoy.strftime('%d/%m/%Y')}.")


